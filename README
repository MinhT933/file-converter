üß† Golang Service - Server & Worker 

> Bootstrap: [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app) (App Router + TypeScript)

## ‚ö° Quick Start

**Requirements**

* Node.js ‚â• 18 (LTS recommended)
* Package manager: **pnpm** (khuy·∫øn ngh·ªã) / npm / yarn

```bash
# install deps
pnpm i

# run dev server
pnpm dev
# open http://localhost:3000
```

üëâ Trang m·∫∑c ƒë·ªãnh n·∫±m ·ªü `app/page.tsx`. L∆∞u file l√† tr√¨nh duy·ªát t·ª± reload.

---

## üîë Environment Variables

T·∫°o file **`.env.local`** (kh√¥ng commit) t·ª´ m·∫´u d∆∞·ªõi ƒë√¢y:

```env
# Public (ƒë∆∞·ª£c g·ª≠i xu·ªëng client)
NEXT_PUBLIC_API_URL=http://localhost:8080

# Private (ch·ªâ d√πng ·ªü server)
API_SECRET=change-me
```

> Next.js t·ª± ƒë·ªông ƒë·ªçc `.env.local`. Kh√¥ng c·∫ßn c·∫•u h√¨nh th√™m.

---

## üìÇ Project Structure

```
.
‚îú‚îÄ‚îÄ app/                # App Router
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx
‚îÇ   ‚îî‚îÄ‚îÄ (routes ...)
‚îú‚îÄ‚îÄ components/         # UI components (Client/Server)
‚îú‚îÄ‚îÄ lib/                # helpers, fetchers
‚îú‚îÄ‚îÄ public/             # static assets
‚îú‚îÄ‚îÄ styles/             # global.css / tailwind.css (n·∫øu d√πng)
‚îú‚îÄ‚îÄ next.config.mjs
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ tsconfig.json
```

---

## üß™ Scripts

C√°c l·ªánh ph·ªï bi·∫øn trong `package.json` (tu·ª≥ project c√≥ th·ªÉ kh√°c):

```jsonc
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  }
}
```

* `pnpm dev` ‚Äì ch·∫°y dev server ·ªü `localhost:3000`
* `pnpm build` ‚Äì build production (t·∫°o `.next`)
* `pnpm start` ‚Äì ch·∫°y build ƒë√£ t·∫°o (production)
* `pnpm lint` ‚Äì ESLint
* `pnpm typecheck` ‚Äì ki·ªÉm tra TypeScript

---

## üé® Fonts & Assets

Project d√πng [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) ƒë·ªÉ t·ª± ƒë·ªông t·ªëi ∆∞u font **Geist** c·ªßa Vercel.

```tsx
// app/layout.tsx
import { Geist, Geist_Mono } from "next/font/google" // ho·∫∑c from "geist/font"
```

> C√≥ th·ªÉ thay b·∫±ng font kh√°c n·∫øu mu·ªën; `next/font` s·∫Ω t·ª± t·∫°o CSS v√† preload h·ª£p l√Ω.

---

## üê≥ Docker (t√πy ch·ªçn)

Ch·∫°y nhanh b·∫±ng Docker (production-like):

```yaml
# docker-compose.yml
services:
  web:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - .env.local
```

**Dockerfile** t·ªëi gi·∫£n:

```dockerfile
FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json pnpm-lock.yaml* yarn.lock* package-lock.json* ./
RUN corepack enable && pnpm i --frozen-lockfile || npm ci || yarn --frozen-lockfile

FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN pnpm build || npm run build || yarn build

FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
EXPOSE 3000
CMD ["node", "node_modules/next/dist/bin/next", "start", "-p", "3000"]
```

Ch·∫°y:

```bash
docker compose up --build
```

---

## üöÄ Deploy

* **Vercel**: ƒë∆°n gi·∫£n nh·∫•t (import repo, set env, deploy).
* **Docker**: build image theo Dockerfile ·ªü tr√™n, push l√™n registry, ch·∫°y `docker run -p 3000:3000 <image>`.

> L∆∞u √Ω set bi·∫øn m√¥i tr∆∞·ªùng production (`NODE_ENV=production`) & cung c·∫•p `.env` t∆∞∆°ng ·ª©ng.

---

## ‚úÖ Code Quality

* ESLint: c·∫•u h√¨nh s·∫µn v·ªõi Next.js
* Prettier: khuy·∫øn ngh·ªã b·∫≠t trong editor
* TypeScript: ch·∫°y `pnpm typecheck` tr∆∞·ªõc khi commit

**VS Code (g·ª£i √Ω)**

```jsonc
// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "typescript.tsdk": "node_modules/typescript/lib"
}
```

---

## üõ†Ô∏è Troubleshooting

* **C·ªïng 3000 b·∫≠n**: ƒë·ªïi c·ªïng `pnpm dev -- -p 3001`
* **Font kh√¥ng t·∫£i**: ki·ªÉm tra c·∫•u h√¨nh `next/font` ho·∫∑c CSP
* **API l·ªói CORS**: b·∫≠t CORS ·ªü backend ho·∫∑c d√πng proxy (`NEXT_PUBLIC_API_URL`)
* **Build ch·∫≠m**: xo√° `.next`, `node_modules`, c√†i l·∫°i dep

```bash
rm -rf .next node_modules
pnpm i && pnpm build
```

---

## üìÑ License

MIT (ho·∫∑c c·∫≠p nh·∫≠t theo license b·∫°n d√πng)

---

### Notes

* README n√†y ƒë√£ tinh g·ªçn n·ªôi dung m·∫∑c ƒë·ªãnh, b·ªï sung env, Docker, v√† guideline quality.
* Thay `NEXT_PUBLIC_API_URL` theo backend c·ªßa b·∫°n.
